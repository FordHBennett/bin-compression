cmake_minimum_required(VERSION 3.12)
project(geobin_compression_proj LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 20)

# Output directories for release and debug builds
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# List of source and header files
set(SOURCES
    src/main.cpp
    src/classes/common_stats.cpp
    src/classes/rlr_class.cpp
    # src/classes/lz4_class.cpp
    # src/classes/lzw_class.cpp
    # src/classes/lzp_class.cpp
    # src/classes/huffman_stats.cpp
    # src/classes/huffman.cpp
    # src/classes/node.cpp
    # src/classes/control_class.cpp
    # src/functions/encoding_decoding_functions.cpp
    src/functions/file_functions.cpp
)

set(HEADERS
    src/classes/common_stats.hpp
    src/classes/rlr_class.hpp
    src/classes/alphabet_table.hpp
    # src/classes/lz4_class.hpp
    # src/classes/lzw_class.hpp
    # src/classes/lzp_class.hpp
    # src/classes/huffman_stats.hpp
    # src/classes/huffman.hpp
    # src/classes/node.hpp
    # src/classes/control_class.hpp
    # src/functions/encoding_decoding_functions.hpp
    src/functions/file_functions.hpp
)


# Add the executable target first
add_executable(geobin_compression ${SOURCES})

# Include directories
target_include_directories(geobin_compression PUBLIC src/classes)
target_include_directories(geobin_compression PUBLIC src/functions)

# Find the nlohmann_json package
find_package(nlohmann_json CONFIG REQUIRED)

# Link the executable to the nlohmann_json library
target_link_libraries(geobin_compression PUBLIC nlohmann_json::nlohmann_json)

# Debug build options
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g3 -Wall -fsanitize=undefined -fsanitize=address -fno-omit-frame-pointer -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -gdwarf-5 -fstack-protector")


# Release build options
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")

# Custom Release with Debug Info build options
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O2 -g -gdwarf-5 -fno-omit-frame-pointer -fdump-tree-cfg-graph -c")

# Specify the build type based on CMake build flags
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build (Debug or Release or RelWithDebInfo)" FORCE)
endif()

if(CMAKE_BUILD_TYPE MATCHES Debug)
    add_definitions(-DDEBUG_MODE)
endif()

# Install the executable to the 'bin' directory
install(TARGETS geobin_compression RUNTIME DESTINATION bin)