# include(/Users/forb/space_teams/vcpkg/scripts/buildsystems/vcpkg.cmake)

### Boilerplate stuff ###
cmake_minimum_required(VERSION 3.16)

# Get list of 
MACRO(SUBDIRLIST result curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
      LIST(APPEND dirlist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

if(NOT WIN32)
  string(ASCII 27 Esc)
  set(ColorReset  "${Esc}[m")
  set(ColorBold   "${Esc}[1m")
  set(Red         "${Esc}[31m")
  set(Green       "${Esc}[32m")
  set(Yellow      "${Esc}[33m")
  set(Blue        "${Esc}[34m")
  set(Magenta     "${Esc}[35m")
  set(Cyan        "${Esc}[36m")
  set(White       "${Esc}[37m")
  set(BoldRed     "${Esc}[1;31m")
  set(BoldGreen   "${Esc}[1;32m")
  set(BoldYellow  "${Esc}[1;33m")
  set(BoldBlue    "${Esc}[1;34m")
  set(BoldMagenta "${Esc}[1;35m")
  set(BoldCyan    "${Esc}[1;36m")
  set(BoldWhite   "${Esc}[1;37m")
endif()

###############################
### CONFIGURATION #############

set(SRC_DIR "src")
set(BUILD_DIR "build")

set(CMAKE_TOOLCHAIN_FILE "../../vcpkg/scripts/buildsystems/vcpkg.cmake"
    CACHE STRING "Vcpkg toolchain file" FORCE)

message(STATUS "CMAKE_TOOLCHAIN_FILE Defined as ${CMAKE_TOOLCHAIN_FILE}")

project(geobin_compression LANGUAGES CXX)


### Choice between a Debug and a Release build ###
if(NOT CMAKE_BUILD_TYPE STREQUAL "")
    message(STATUS "CMAKE_BUILD_TYPE Defined as ${CMAKE_BUILD_TYPE}")
else()
    set(CMAKE_BUILD_TYPE Debug)
    # set(CMAKE_BUILD_TYPE Release)
    message(STATUS "CMAKE_BUILD_TYPE Undefined; proceeding with default: ${CMAKE_BUILD_TYPE}")
endif()

# Set the ST_DEBUG_BUILD macro to true if the build type is Debug
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
	add_compile_definitions(ST_DEBUG_BUILD=true)
else()
	add_compile_definitions(ST_DEBUG_BUILD=false)
endif()


set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# If DEBUG_DEPENDENCIES_ARE_OK, we will link with libraries that require access to the debug version
# of the C++ runtime. This is a no-go for public releases for people that aren't going to be compiling
# C++ code themselves.
set(DEBUG_DEPENDENCIES_ARE_OK true)


### END CONFIGURATION #########
###############################

#################################################
### DEFINING SOURCES FOR EXEs AND LIBs ##########

#https://stackoverflow.com/questions/38296756/what-is-the-idiomatic-way-in-cmake-to-add-the-fpic-compiler-option
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

set(SOURCES
    ${SRC_DIR}/main.cpp
    ${SRC_DIR}/classes/common_stats.cpp
    ${SRC_DIR}/classes/rlr_class.cpp
    ${SRC_DIR}/functions/file_functions.cpp
)

set(HEADERS
    src/classes/common_stats.h
    src/classes/rlr_class.h
    src/functions/file_functions.h
)

add_executable(
    run_geobin_compression 
    ${SOURCES}
)


### END DEFINING SOURCES FOR EXEs AND LIBs ######
#################################################

#################################################
### Linking External Libraries ##################

# Output directories for release and debug builds
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)



# # Include directories
target_include_directories(run_geobin_compression PUBLIC src/classes)
target_include_directories(run_geobin_compression PUBLIC src/functions)

# Find the nlohmann_json package
find_package(nlohmann_json CONFIG REQUIRED)

# Link the executable to the nlohmann_json library
target_link_libraries(run_geobin_compression PRIVATE nlohmann_json::nlohmann_json)

### END Linking External Libraries ##############
#################################################


# Debug build options
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O -g3 -Wall -gdwarf -fcolor-diagnostics ")

# Release build options
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 ")


#################################################
### SETTING BINARY OUTPUT DIRECTORIES ###########

# Set the output directory for the executable if degug build
# if(CMAKE_BUILD_TYPE STREQUAL "Debug")
#     set_target_properties(run_geobin_compression PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/debug)
# else()
#     set_target_properties(run_geobin_compression PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/release)
# endif()

# Install the executable to the 'bin' directory
install(TARGETS run_geobin_compression RUNTIME DESTINATION bin)