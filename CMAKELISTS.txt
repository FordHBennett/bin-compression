cmake_minimum_required(VERSION 3.12)
project(geobin_compression)
set(CMAKE_CXX_STANDARD 20)

# Output directories for release and debug builds
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# List of source and header files
set(SOURCES
    src/main.cpp
    src/classes/rlr_class.cpp
    src/classes/lzw_class.cpp
    src/classes/lzp_class.cpp
    src/classes/huffman_class.cpp
    src/classes/lzo1_class.cpp
    src/functions/encoding_decoding_functions.cpp
    src/functions/file_functions.cpp
)

set(HEADERS
    src/classes/rlr_class.h
    src/classes/lzw_class.h
    src/classes/lzp_class.h
    src/classes/huffman_class.h
    src/classes/lzo1_class.h
    src/functions/encoding_decoding_functions.h
    src/functions/file_functions.h
)

# Add the executable target
add_executable(geobin_compression ${SOURCES} ${HEADERS})

# Include directories
include_directories(src/classes)
include_directories(src/functions)

# Debug build options
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -g -Wextra -fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer")

# Release build options
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG")

# Specify the build type based on CMake build flags
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build (Debug or Release)" FORCE)
endif()

# Install the executable to the 'bin' directory
install(TARGETS geobin_compression RUNTIME DESTINATION bin)
